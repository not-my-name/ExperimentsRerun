//For resourceObject:
private ResourceObject[] adjacentResources;

in constructor:
	adjacentResources = new ResourceObject[4];

private void initDetectionPoints(){
        float halfWidth = (float) width / 2;
        float dWidth = (float) width / 4;
        float halfHeight = (float) height / 2;
        float dHeight = (float) height / 4;
        float xspacing = 0.1f;
        float yspacing = 0.1f;

        Vec2 leftMidPos = new Vec2(-halfWidth-xspacing, 0);
        Vec2 leftUPos = new Vec2(-halfWidth-xspacing, 0 + dHeight);
        Vec2 leftBPos = new Vec2(-halfWidth-xspacing, 0 - dHeight);

        Vec2 rightMidPos = new Vec2(halfWidth+xspacing, 0);
        Vec2 rightUPos = new Vec2(halfWidth+xspacing, 0 + dHeight);
        Vec2 rightBPos = new Vec2(halfWidth+xspacing, 0 - dHeight);

        Vec2 topMidPos = new Vec2(0, halfHeight+yspacing);
        Vec2 topLPos = new Vec2(-dWidth, halfHeight+yspacing);
        Vec2 topRPos = new Vec2(dWidth, halfHeight+yspacing);

        Vec2 bottomMidPos = new Vec2(0, -halfHeight-yspacing);
        Vec2 bottomLPos = new Vec2(-dWidth, -halfHeight-yspacing);
        Vec2 bottomRPos = new Vec2(dWidth, -halfHeight-yspacing);

        Vec2 [] leftDPoints = {leftMidPos, leftUPos, leftBPos};

        Vec2 [] rightDPoints = {rightMidPos, rightUPos, rightBPos};

        Vec2 [] topDPoints = {topMidPos, topLPos, topRPos};

        Vec2 [] bottomDPoints= {bottomMidPos, bottomLPos, bottomRPos};

        detectionPoints[0] = new DetectionPoint (leftDPoints, this.getBody());
        detectionPoints[1] = new DetectionPoint (rightDPoints, this.getBody());
        detectionPoints[2] = new DetectionPoint (topDPoints, this.getBody());
        detectionPoints[3] = new DetectionPoint (bottomDPoints, this.getBody());
    }

public void updateAdjacent(ArrayList<ResourceObject> resourceArray){
        for(int i=0;i<adjacentList.length;i++){
            adjacentList[i] = "_";
            adjacentResources[i] = null;
        }
        // System.out.println("THIS: " + this);
        for(int j=0;j<resourceArray.size();j++){
            if(this != resourceArray.get(j)){
                ResourceObject otherRes = resourceArray.get(j);
                if (isClosest(otherRes)) {
                    closestResource = otherRes;
                }
                if (isAdjacentAndAligned(this, otherRes)) {

                }
            }
        }

    }

/**
    Method that checks whether two resources are aligned and close enough to eachother
    @param ResourceObject r1: the first resource
    @param ResourceObject r2: the second resource
    For the two resources to be algined, the vectors, made by taking the diagonal of the AABB box's bottom left and top right corners, are either parallel or purpendicular
    For the two resources to be close enough, both resources must have one detectionPoint within the bounds of the other resource respectively
    **/

    //ALIGNMENT
    public static boolean isAdjacentAndAligned (ResourceObject r1, ResourceObject r2) {
        boolean isAligned = false;
        boolean isClose = false;

        Body r1Body = r1.getBody();
        Vec2 r1Pos = r1Body.getPosition();
        AABB r1AABB = r1.getAabb();
        float r1Width = (float)r1.getWidth();

        Body r2Body = r2.getBody();
        Vec2 r2Pos = r2Body.getPosition();
        AABB r2AABB = r2.getAabb();
        float r2Width = (float)r2.getWidth();

        // System.out.println(r1);
        // System.out.println("\tcomparing with " + r2);
        //test for closeness
        int sideClosestToR2 = r1.getSideNearestTo(r2Pos, r2Width, r2AABB);
        int sideClosestToR1 = r2.getSideNearestTo(r1Pos, r1Width, r1AABB);
        // System.out.println("\t\t" + sideClosestToR1 + " " + sideClosestToR2);

        if ((sideClosestToR1 >= 0)&&(sideClosestToR2 >= 0)) {
            // System.out.println(r1 + " " + r2);
            // if (sideClosestToR2 > 0) {
            //     sideClosestToR2--;
            // }
            // if (sideClosestToR1 > 0) {
            //     sideClosestToR1--;
            // }
            // if (sideClosestToR1 < 0) {
            //     sideClosestToR1 = Math.abs(sideClosestToR1) - 1;
            // }
            // if (sideClosestToR2 < 0) {
            //     sideClosestToR2 = Math.abs(sideClosestToR2) - 1;
            // }
            
            isClose = true;
        }
        else {
            isClose = false;
        }

        if (isClose) {
            //test for alignment
            float R1Angle = r1Body.getAngle();
            float R2Angle = r2Body.getAngle();

            float angleDiff = R1Angle - R2Angle;
            float divBy90 = (float)Math.abs(angleDiff/(((float)Math.PI)/2));

            float error = divBy90 - (float)Math.floor(divBy90);

            if ((Math.abs(error) < 0.02)||(Math.abs(error) > 0.98)) {
                isAligned = true;
            }
        }

        if ((isAligned == true) && (isClose == true)) {
            r1.setAdjacency(r2, r2.getType(), sideClosestToR2);
            r2.setAdjacency(r1, r1.getType(), sideClosestToR1);
            return true;
        }
        else {

            return false;
        }
    }

    /**
    Method that calculates whether or not a resource is near enough to this resource to be considered 'connected'
    @param Vec2 otherResPos
    @param float otherResWidth
    @param int side: the side that this other resource is nearby to (-1 if not near)
    **/
    //ALIGNMENT
    public int getSideNearestTo (Vec2 otherResPos, float otherResWidth, AABB otherResAABB) {
        boolean result = false;
        int side = 0;
        float min = 20f;
        int closestSide = -1;

        for (int i = 0; i < detectionPoints.length; i++) {
            String s = "";
            if (i == 0) {
                s = "LEFT";
            }
            else if (i == 1) {
                s = "RIGHT";
            }
            else if (i == 2) {
                s = "TOP";
            }
            else {
                s = "BOTTOM";
            }
            Vec2 [] dpPos = detectionPoints[i].getRelativePositions(this.getBody().getPosition());
            // if (AABBUtil.testPoint(dpPos[0], otherResAABB)) {
            //     System.out.println("\t\t\t" + s + " Middle DP inside");
            // }
            // if (AABBUtil.testPoint(dpPos[1], otherResAABB)) {
            //     System.out.println("\t\t\t" + s + " Other1 DP inside");   
            // }
            // if (AABBUtil.testPoint(dpPos[2], otherResAABB)) {
            //     System.out.println("\t\t\t" + s + " Other2 DP inside");   
            // }
            // System.out.println("\t\t\t" + AABBUtil.testPoint(dpPos[0], otherResAABB));
            // System.out.println("\t\t\t" + AABBUtil.testPoint(dpPos[1], otherResAABB));
            // System.out.println("\t\t\t" + AABBUtil.testPoint(dpPos[2], otherResAABB));
            //If the center detection point is within the other Res' AABB, check wether at least one of the other DP's on that side are within too
            if (AABBUtil.testPoint(dpPos[0], otherResAABB)) {
                // System.out.println("Midpnt is inside");
                for (int j = 1; j < dpPos.length; j++) {
                    // float dpDistance = dpPos.sub(otherResPos).length();
                    // System.out.println("\t\t\t is within: " + AABBUtil.testPoint(dpPos, otherResAABB));
                    // if (detectionPoints[i].isWithinResource(this.getBody().getPosition(), otherResPos, otherResWidth)) {
                        
                    // }
                    if (AABBUtil.testPoint(dpPos[j], otherResAABB)) {
                        // System.out.println("\t\t\tSIDE: " + i);
                        result = true;
                        side = i;
                        break;
                    }
                    // else {
                    //     if (dpDistance < min) {
                    //         min = dpDistance;
                    //         closestSide = - 1 - i;
                    //     }
                    // }
                }   
            }            
        }
        // System.out.println("===================================");

        if (result) {
            return side;
        }

        else {
            return closestSide;
        }
    }

//ALIGNMENT
    public void setAdjacency (ResourceObject r, String rType, int i) {
        adjacentList[i] = rType;
        adjacentResources[i] = r;
    }

public ResourceObject[] getAdjacentResources() {
        return adjacentResources;
    }

******************************************************************************************
For COnstructionTask:

public void update(){  
    for(ResourceObject resource : resources){
        resource.updateAdjacent(resources);
        String [] resAdjacentList = resource.getAdjacentList();
        for (int i = 0; i < resAdjacentList.length; i++) {
            if (IS_FIRST_CONNECTED) {
                if (!resAdjacentList[i].equals("_")) {

                    ResourceObject otherRes = resource.getAdjacentResources()[i];
                    // System.out.println("about to start construction: " + resource + "," + otherRes);
                    if (resource.pushedByMaxRobots() || otherRes.pushedByMaxRobots()) {
                        constructionZone.startConstructionZone(resource, otherRes);
                        // tryCreateWeld(resource, otherRes);
                        // System.out.println(constructionZone.getFitnessStats().getTeamFitness());
                        IS_FIRST_CONNECTED = false;
                    }
                    
                }
            }
            else {
                if ((!resAdjacentList[i].equals("_"))&&(!constructionZone.isInConstructionZone(resource))) {
                    ResourceObject otherRes = resource.getAdjacentResources()[i];
                    if (constructionZone.isInConstructionZone(otherRes)) {
                        constructionZone.addResource(resource, false);
                        // tryCreateWeld(resource, otherRes);
                    }
                }
            }
        }
    }
}